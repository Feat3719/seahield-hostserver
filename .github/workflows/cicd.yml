name: Spring Boot CI/CD Pipeline with Gradle

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Restore keystore file from Secret
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > src/main/resources/keystore.p12

      - name: Restore application.properties from Secret
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 -d > src/main/resources/application.properties

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to DockerHub
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USERNAME" --password-stdin
      - name: Build Docker
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/seahield .
      - name: Push Docker
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/seahield:latest

      - name: Create .env file for Docker Compose
        run: |
          echo SERVER_SSL_KEY_STORE=${{ secrets.SERVER_SSL_KEY_STORE }} > .env
          echo SERVER_SSL_KEY_STORE_PASSWORD=${{ secrets.SERVER_SSL_KEY_STORE_PASSWORD }} >> .env
          echo SERVER_SSL_KEY_STORE_TYPE=${{ secrets.SERVER_SSL_KEY_STORE_TYPE }} >> .env
          echo SERVER_SSL_KEY_ALIAS=${{ secrets.SERVER_SSL_KEY_ALIAS }} >> .env

      - name: Run Docker Compose
        run: docker-compose up -d
        env:
          SERVER_SSL_KEY_STORE: ${{ secrets.SERVER_SSL_KEY_STORE }}
          SERVER_SSL_KEY_STORE_PASSWORD: ${{ secrets.SERVER_SSL_KEY_STORE_PASSWORD }}
          SERVER_SSL_KEY_STORE_TYPE: ${{ secrets.SERVER_SSL_KEY_STORE_TYPE }}
          SERVER_SSL_KEY_ALIAS: ${{ secrets.SERVER_SSL_KEY_ALIAS }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        with:
          host: ${{ secrets.EC2_HOST_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_NEW }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/seahield
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            sudo docker run -d --name myapp -p 443:443 ${{ secrets.DOCKER_HUB_USERNAME }}/seahield
